[{"id":0,"href":"/hadv-book/docs/usage/getting-started/001-win10/","title":"1. Windows10 の準備","section":"Getting Started","content":"1. Windows10 の準備 #  ここは 001-win10（content/docs/usage/getting-started/001-win10）です。\nはじめに #  ここで紹介する設定は hadv を使用する上で必須ではありません。\n01. 260 文字パス長制限を解除 #  Windows10 で使っている NTFS ファイルシステムは最大 64KB（UTF-16 で 32767 文字）までのパス名をサポートしていますが、 Windows 95 系列との互換性のため、ほとんどのアプリケーションが 260 文字を上限にしています。\nWSL では NTFS の上限までの長さのパス名が使用できるとのことですが、 それらで使用しているファイル等をエクスプローラーで表示させることもあるかもしれないので、念のため設定する方法を紹介します。\n現在の設定を確認 #  管理者として PowerShell を開き、以下を実行します。\n1  (Get-ItemProperty \u0026#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\u0026#39; -Name \u0026#39;LongPathsEnabled\u0026#39;).LongPathsEnabled   結果が 1 ならば設定済みです。ここで終了します。\n未設定の場合、設定する #  確認結果が 0 だった場合は未設定です。\n管理者として開いた PowerShell で、以下を実行します。\n1  Set-ItemProperty \u0026#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\u0026#39; -Name \u0026#39;LongPathsEnabled\u0026#39; -Value 1   "},{"id":1,"href":"/hadv-book/docs/usage/getting-started/","title":"Getting Started","section":"Usage","content":"Getting Started（hadv-book の開始方法） #  ここは Getting Started（content/docs/usage/getting-started/_index.md）です。\nコンテンツ一覧 #   1. Windows10 の準備  Windows10 設定の参考情報   2. WSL2 の準備  WSL2 のインストールや設定の参考情報   3. VSCode と Git の準備  VSCode と Git のインストールや設定の参考情報   4. リポジトリの作成  hadv-book テンプレートを使って新規リポジトリを作成する参考情報   5. リポジトリの編集  hadv-book テンプレートを使って作成した新規リポジトリの編集についての参考情報   6. Web サイトのビルド  hadv-book テンプレートを使って作成した新規リポジトリの Web サイトをビルドする参考情報   7. Github Pages で公開  hadv-book テンプレートを使って作成した新規リポジトリの Web サイトを Github Pages で公開する参考情報   "},{"id":2,"href":"/hadv-book/docs/usage/","title":"Usage","section":"Docs","content":"Usage #  ここは Usage（content/docs/usage/_index.md）です。\nコンテンツ一覧 #   Getting Started  hadv-book の開始方法   Templates  テンプレート集   "},{"id":3,"href":"/hadv-book/docs/usage/templates/minutes/","title":"議事録","section":"Templates","content":"議事録 #  ここは 議事録（content/docs/info/templates/minutes/_index.md）です。\nコンテンツ一覧 #   議事録テンプレート.md  議事録作成に使えるテンプレートのサンプル   "},{"id":4,"href":"/hadv-book/docs/usage/getting-started/002-wsl2/","title":"2. WSL2 の準備","section":"Getting Started","content":"2. WSL2 の準備 #  ここは 002-wsl2（content/docs/usage/getting-started/002-wsl2）です。\nはじめに #  公式ドキュメント（https://docs.microsoft.com/ja-jp/windows/wsl/install-win10）を使って設定することを強く推奨します。\nしかしながら、公式ドキュメントでは Microsoft Store を開く手順が示されており、 制限がかけられた環境（配布された PC で機能が削られている等）では手順通りに設定することができないケースもあります。 そのため、ここでは Microsoft Store を使わない手順を参考まで紹介します。\n最新の Windows Insider の Windows 10 プレビュー ビルドが使用可能ならば１コマンドで全て完結します。\n公式ドキュメントを参照してください。  01. WSL2 実行のための要件を確認 #  公式ドキュメントにある要件は、\n x64 システムの場合:バージョン 1903 以降、ビルド 18362 以上。\n（マイナービルドは 1049 より大きい必要あり） ARM64 システムの場合:バージョン 2004 以降、ビルド 19041 以上。 18362 より前のビルドは WSL 2 をサポートしていません。  バージョンの確認は、\n管理者として PowerShell を開き、以下を実行します。\n1  (Get-ItemProperty -Path \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u0026#34; -Name ReleaseId).ReleaseID   ビルドの確認は、\n管理者として開いた PowerShell で、以下を実行します。\n1  (Get-ItemProperty -Path \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u0026#34; -Name CurrentBuild).CurrentBuild   マイナービルドの確認は、\n管理者として開いた PowerShell で、以下を実行します。\n1  (Get-ItemProperty -Path \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u0026#34; -Name UBR).UBR   WSL2 実行のための要件に満たなかった場合は、Windows の更新を試みます。\n02. WSL 機能の有効化 #  管理者として PowerShell を開き、以下を実行します。\n1  dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart   03. 仮想マシンプラットフォーム有効化 #  管理者として PowerShell を開き、以下を実行します。\n1  dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart   コンピューターに仮想化機構がない場合など、エラーが発生する場合があります。\n公式ドキュメント「手順 3:」に対応方法が書かれていますので、従います。  04. 再起動 #  PC を再起動します。\n05. Linux カーネル更新 #  x64 マシン用 WSL2 Linux カーネル更新プログラム パッケージ （https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi） をダウンロードして実行します。\n（問題があった場合は、公式ドキュメントを参照します）\n06. WSL 2 を既定バージョンに設定 #  管理者として PowerShell を開き、以下を実行します。\n1  wsl --set-default-version 2   07. Ubuntu-20.04 をダウンロード #  管理者として PowerShell を開き、以下を実行します。\n1 2  Set-Location -Path $env:USERPROFILE curl.exe -s -L -o \u0026#34;Ubuntu_2004.2020.424.0_x64.appx\u0026#34; \u0026#34;https://aka.ms/wslubuntu2004\u0026#34;   カレントユーザーのホームディレクトリに Ubuntu-20.04 のディストリビューション・パッケージがダウンロードされます。 Linux 用 Windows サブシステム ディストリビューション・パッケージを手動でダウンロードする方法については、 https://docs.microsoft.com/ja-jp/windows/wsl/install-manual に詳しい情報があります。  08. Ubuntu-20.04 をインストール #  管理者として PowerShell を開き、以下を実行します。\n1 2  Set-Location -Path $env:USERPROFILE Add-AppxPackage .\\Ubuntu_2004.2020.424.0_x64.appx   09. ユーザー名とパスワードを設定 #  Windows のスタートメニューから Ubuntu 20.04 LTS を実行すると、最初にアカウント作成が求められます。\n作成するアカウントについて、ドキュメント には次のような説明があります。\n この ユーザー名 および パスワード は、インストールする Linux ディストリビューションごとに固有であり、Windows ユーザー名とは関係ありません。 ユーザーが ユーザー名 および パスワード を作成すると、そのアカウントがディストリビューションの既定のユーザーとなり、起動時に自動的にサインインされます。 このアカウントは、Linux 管理者と見なされ、sudo (Super User Do) 管理コマンドを実行できます。 Windows Subsystem for Linux で実行されている各 Linux ディストリビューションには、独自の Linux ユーザー アカウントとパスワードがあります。 ディストリビューションの追加、再インストール、再設定を行うたびに、Linux ユーザー アカウントを構成する必要があります。  ユーザーアカウント作成については、\nhttps://docs.microsoft.com/ja-jp/windows/wsl/user-support に詳しい情報があります。  10. パッケージ更新とアップグレード #  Ubuntu-20.04 コンソール画面にて、以下を実行します。\n1  sudo apt update \u0026amp;\u0026amp; sudo apt upgrade   "},{"id":5,"href":"/hadv-book/docs/example/","title":"Example","section":"Docs","content":"Example #  ここは Example（content/docs/example/_index.md）です。\nコンテンツ一覧 #   AsciiDoc  AsciiDoc の実例ページ集   Markdown  Markdown の実例ページ集   "},{"id":6,"href":"/hadv-book/docs/usage/getting-started/003-vscode+git/","title":"3. VSCode と Git の準備","section":"Getting Started","content":"3. VSCode と Git の準備 #  ここは 003-vscode+git（content/docs/usage/getting-started/003-vscode+git）です。\nはじめに #  VSCode はインストーラーを使うか、Zip アーカイブを解凍して実行する２つのインストール方法がありますが、どちらでも構いません。 Git は WSL2 の Ubuntu 20.04 でインストールできますので、今回はその方法を紹介します。\n01. VSCode のインストール #  本体のインストール #  インストーラーを使ったインストール方法を紹介します。\n 使用中の環境に応じた VSCode インストーラーを https://code.visualstudio.com/download からダウンロードします。 ダウンロードしたら、インストーラー（VSCodeUserSetup- {version} .exe）を実行します。  VSCode セットアップに関する詳しい情報は、\nhttps://code.visualstudio.com/docs/setup/windows にあります。  拡張機能のインストール #  hadv では VSCode の devcontainer という仕組みを使用するため、必須となる拡張機能があります。\nここでは、VSCode にパスが通っていることを前提に、コマンドプロンプトによる簡単なインストール方法を紹介します。\nVSCode 拡張機能に関する詳しい情報は、\nhttps://code.visualstudio.com/docs/editor/extension-marketplace にあります。  言語パック（日本語） #     名前 ID 紹介     Japanese Language Pack\nfor Visual Studio Code ms-ceintl\n.vscode-language-pack-ja 日本語にローカライズされた UI を提供    1  code --install-extension ms-ceintl.vscode-language-pack-ja   必須の拡張機能 #     名前 ID 紹介     Remote Development ms-vscode-remote\n.vscode-remote-extensionpack リモートマシンやコンテナ内のフォルダを開く    1  code --install-extension ms-vscode-remote.vscode-remote-extensionpack   便利な拡張機能 #  必須ではありませんが、あると便利な拡張機能を紹介（クリックで開く）    名前 ID 紹介     vscode-icons vscode-icons-team\n.vscode-icons 拡張子ごとにキレイなアイコンを表示   Project Manager alefragnani\n.project-manager 複数のプロジェクトの管理   Bookmarks alefragnani\n.bookmarks ファイルに「しおり」を付与   Local History xyz\n.local-history ファイル編集の履歴を保存   Todo Tree gruntfuggly\n.todo-tree コメントタグの TODO などをツリー表示   GitLens eamodio\n.gitlens git の情報を表示   Git Graph mhutchie\n.git-graph git のコミット履歴を表示   GitHub Pull Requests\nand Issues github\n.vscode-pull-request-github GitHub 操作   Bracket Pair Colorizer 2 coenraads\n.bracket-pair-colorizer-2 カッコの対応を色付きで表示   indent-rainbow oderwat\n.indent-rainbow インデントを見やすく表示   zenkaku mosapride\n.zenkaku 全角スペースの可視化   Rainbow CSV mechatroner\n.rainbow-csv CSV, TSV の色分け、簡易クエリ   Excel Viewer grapecity\n.gc-excelviewer CSV を Excel 的に表示   Code Spell Checker streetsidesoftware\n.code-spell-checker スペルミス表示でタイポを防止   テキスト校正くん ics\n.japanese-proofreading 日本語文章校正チェック   Visual Studio IntelliCode visualstudioexptteam\n.vscodeintellicode コード補完の AI サポート   Path Intellisense christian-kohler\n.path-intellisense パス入力をインテリセンスで補完   YAML redhat\n.vscode-yaml YAML サポート   XML redhat\n.vscode-xml XML サポート   jumpy wmaurer\n.vscode-jumpy カーソル移動を補助   Prettier esbenp\n.prettier-vscode コードフォーマッター   Sort lines tyriar\n.sort-lines 行ソート   Partial Diff ryu1kn\n.partial-diff 選択した範囲の差分を表示   hexdump for VSCode slevesque\n.vscode-hexdump 16 進ダンプ表示   Draw.io Integration hediet\n.vscode-drawio Draw.io で図の作成   PrintCode nobuhito\n.printcode コードの印刷サポート   Code Runner formulahendry\n.code-runner 選択したコードをその場で実行    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  code --install-extension vscode-icons-team.vscode-icons code --install-extension alefragnani.project-manager code --install-extension alefragnani.bookmarks code --install-extension xyz.local-history code --install-extension gruntfuggly.todo-tree code --install-extension eamodio.gitlens code --install-extension mhutchie.git-graph code --install-extension github.vscode-pull-request-github code --install-extension coenraads.bracket-pair-colorizer-2 code --install-extension oderwat.indent-rainbow code --install-extension mosapride.zenkaku code --install-extension mechatroner.rainbow-csv code --install-extension grapecity.gc-excelviewer code --install-extension streetsidesoftware.code-spell-checker code --install-extension ics.japanese-proofreading code --install-extension visualstudioexptteam.vscodeintellicode code --install-extension christian-kohler.path-intellisense code --install-extension redhat.vscode-yaml code --install-extension redhat.vscode-xml code --install-extension wmaurer.vscode-jumpy code --install-extension esbenp.prettier-vscode code --install-extension tyriar.sort-lines code --install-extension ryu1kn.partial-diff code --install-extension slevesque.vscode-hexdump code --install-extension hediet.vscode-drawio code --install-extension nobuhito.printcode code --install-extension formulahendry.code-runner   設定サンプル（VSCode - settings.json） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  { \u0026#34;window.zoomLevel\u0026#34;: -1, \u0026#34;window.title\u0026#34;: \u0026#34;${dirty}${activeEditorMedium}${separator}${rootName}\u0026#34;, \u0026#34;editor.minimap.side\u0026#34;: \u0026#34;left\u0026#34;, \u0026#34;editor.minimap.showSlider\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;editor.minimap.scale\u0026#34;: 3, \u0026#34;editor.minimap.maxColumn\u0026#34;: 40, \u0026#34;editor.rulers\u0026#34;: [80,120], \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.tabSize\u0026#34;: 2, \u0026#34;editor.cursorBlinking\u0026#34;: \u0026#34;smooth\u0026#34;, \u0026#34;editor.cursorStyle\u0026#34;: \u0026#34;block\u0026#34;, \u0026#34;editor.renderWhitespace\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;editor.renderControlCharacters\u0026#34;: true, \u0026#34;workbench.editor.openPositioning\u0026#34;: \u0026#34;last\u0026#34;, \u0026#34;workbench.editor.highlightModifiedTabs\u0026#34;: true, \u0026#34;files.autoSave\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;files.autoGuessEncoding\u0026#34;: true, \u0026#34;terminal.integrated.fontFamily\u0026#34;: \u0026#34;\u0026#39;MS Gothic\u0026#39;\u0026#34;, \u0026#34;[shellscript]\u0026#34;: { \u0026#34;editor.renderIndentGuides\u0026#34;: true, \u0026#34;files.encoding\u0026#34;: \u0026#34;utf8\u0026#34; }, \u0026#34;[bat]\u0026#34;: { \u0026#34;editor.renderIndentGuides\u0026#34;: true, \u0026#34;files.encoding\u0026#34;: \u0026#34;shiftjis\u0026#34; }, \u0026#34;[powershell]\u0026#34;: { \u0026#34;editor.renderIndentGuides\u0026#34;: true, \u0026#34;files.encoding\u0026#34;: \u0026#34;shiftjis\u0026#34; }, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;vscode-icons\u0026#34;, \u0026#34;todo-tree.tree.showScanModeButton\u0026#34;: false, \u0026#34;indentRainbow.colors\u0026#34;: [ \u0026#34;rgba(255,0,0,0.5)\u0026#34;, \u0026#34;rgba(255,165,0,0.5)\u0026#34;, \u0026#34;rgba(255,255,0,0.5)\u0026#34;, \u0026#34;rgba(0,128,0,0.5)\u0026#34;, \u0026#34;rgba(0,255,255,0.5)\u0026#34;, \u0026#34;rgba(0,0,255,0.5)\u0026#34;, \u0026#34;rgba(128,0,128,0.5)\u0026#34; ], \u0026#34;code-runner.runInTerminal\u0026#34;: true, \u0026#34;code-runner.clearPreviousOutput\u0026#34;: true, }      02. Git のインストール #  WSL2 の Ubuntu 20.04 コンソール画面を開き、以下を実行します。\n1  sudo apt-get install git   WSL2 への Git インストールに関する詳しい情報は、\nhttps://docs.microsoft.com/ja-jp/windows/wsl/tutorials/wsl-git にあります。  "},{"id":7,"href":"/hadv-book/docs/usage/getting-started/004-create-repo/","title":"4. リポジトリの作成","section":"Getting Started","content":"4. リポジトリの作成 #  ここは 004-create-repo（content/docs/usage/getting-started/004-create-repo）です。\nはじめに #  テンプレートからリポジトリを作成することはリポジトリをフォークすることに似ているが、以下の違いがあるとのこと。\n 新しいフォークは、親リポジトリのコミット履歴すべてを含んでいますが、テンプレートから作成されたリポジトリには、最初は 1 つのコミットしかありません。 フォークへのコミットはコントリビューショングラフに表示されませんが、テンプレートから作成されたリポジトリへのコミットはコントリビューショングラフに表示されます。 フォークは、既存のプロジェクトにコードをコントリビュートするための一時的な方法となります。テンプレートからリポジトリを作成することは、新しいプロジェクトを素早く始める方法です。  hadv-book をフォークして使うこともできますが、ここでは、テンプレートとなっている https://github.com/H16K148/hadv-book リポジトリを使って、 Github 上に新しいリポジトリを作成する方法を紹介します。\nテンプレートからリポジトリを作成する手順については、\nhttps://docs.github.com/ja/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template\nに情報があります。  01. リポジトリを作成する #  メインページにアクセス #  リポジトリのメインページ（https://github.com/H16K148/hadv-book）にアクセスします。\nUse this template をクリック #  緑色のボタン「Use this template」をクリックします。\nアカウントの選択 #  Owner（オーナー）ドロップダウンメニューを使い、リポジトリを所有したいアカウントを選択してください。\nリポジトリ名の入力 #  リポジトリの名前と、任意で説明を入力してください。\nリポジトリ可視性の選択など #  リポジトリの可視性を選択してください。\nhadv-book のように、hugo コマンドの実行で作成された Web サイト を Github Pages で公開するなら「Public」を選びます。\nhadv-book にブランチはありませんので、「Include all branches」にチェックは必要ありません。\nリポジトリを作成 #  緑色のボタン「Create repository from template」をクリックします。\n新しくリポジトリが作成されました。\n"},{"id":8,"href":"/hadv-book/docs/usage/templates/","title":"Templates","section":"Usage","content":"Templates #  ここは Templates（content/docs/info/templates/_index.md）です。\nコンテンツ一覧 #   議事録  議事録テンプレート   "},{"id":9,"href":"/hadv-book/docs/usage/getting-started/005-edit-repo/","title":"5. リポジトリの編集","section":"Getting Started","content":"5. リポジトリの編集 #  ここは 005-edit-repo（content/docs/usage/getting-started/005-edit-repo）です。\nはじめに #  テンプレートから新たに作成したリポジトリ（ここでは test-hadv-book リポジトリとします）の作成直後のデータは、 hadv-book の Web ページをビルドするための設定のままとなっているため、 いくつかの設定変更が必要になります。\nまた、Github Pages の設定も解除されているため、ビルドした Web サイトを公開するためには改めて公開する設定に変更する必要があります。\n01. リポジトリを複製 #  Windows 上の任意のフォルダー（ここでは仮に、C:\\\\path\\to\\dir\\test-hadv-book を指定）に、リポジトリを複製します。\nUbuntu-20.04 コンソール画面にて、以下を実行します。\n1 2  git clone --recursive https://github.com/H16K148/test-hadv-book.git \\ /mnt/c/path/to/dir/test-hadv-book   ここで作成されたフォルダー（test-hadv-book）を『ローカル作業ディレクトリ』と呼ぶことにします。\n02. VSCode でフォルダーを開く #  VSCode でフォルダーを開く方法は複数あります。\n VSCode を起動して「ファイル \u0026gt; フォルダーを開く」で開きたいディレクトリを選択する。 エクスプローラーで開きたいディレクトリを右クリックしてメニューを開き、「Code で開く」を選択する。\n（インストーラーによるインストール時に追加タスクとして「Code で開く」アクションを追加した場合のみ） コマンドプロンプトで開きたいディレクトリに移動して『code .』を実行する。\n（パスが通っている場合のみ）  上記いずれかの方法を用いて、『ローカル作業ディレクトリ』を VSCode で開きます。\n03. devcontainer の設定変更 #  .devcontainer/.env #  次の設定を変更します。\n HADV_NAME_PREFIX  使用するコンテナ名のプレフィックスを指定。別の hadv プロジェクトと被ってはいけません。   HADV_URL_SUBDIRECTORY  ビルドした Web サイトのルートとなるサブディレクトリを指定。Github Pages で公開する場合など、他と被らないように注意が必要。   HADV_STAGING_PORT  hadv のステージングサイトに使用するポート番号を指定。別の hadv プロジェクトと被ってはいけません。    変更前 #  1 2 3  HADV_NAME_PREFIX=hadv-book HADV_URL_SUBDIRECTORY=hadv-book/ HADV_STAGING_PORT=8082   変更後 #  1 2 3  HADV_NAME_PREFIX=test-hadv-book HADV_URL_SUBDIRECTORY=test-hadv-book/ HADV_STAGING_PORT=8083   04. devcontainer を起動 #  Ctrl+Shift+P または F1 で表示される入力域を使って「Remote-Containers: Reopen Folder in Container」を実行する。\nDev Container が立ち上がります。\n05. hugo の設定変更 #  ファイルから「変更前」の行を探し出し、「変更後」の状態に書き換えます。\nURL のサブディレクトリに当たる部分の設定値は、.devcontainer/.env の HADV_URL_SUBDIRECTORY と合わせなければいけません。 設定値がズレていると、ステージングサイトが正しく表示されないことがあります。\n（スラッシュ『/』の置き方に注意してください）  config/_default/config.toml #  変更前 #  baseURL = \u0026#34;https://localhost/hadv-book/\u0026#34; title = \u0026#34;hadv-book\u0026#34; BookRepo = \u0026#39;https://github.com/H16K148/hadv-book\u0026#39; CopyrightHTML = \u0026#34;Copyright \u0026amp;#xA9; 2021 \u0026lt;a href=\\\u0026#34;https://h16k148.github.io\\\u0026#34;\u0026gt;H16K148\u0026lt;/a\u0026gt;. All Rights Reserved.\u0026#34; 変更後 #  baseURL = \u0026#34;https://localhost/test-hadv-book/\u0026#34; title = \u0026#34;test-hadv-book\u0026#34; BookRepo = \u0026#39;https://github.com/H16K148/test-hadv-book\u0026#39; CopyrightHTML = \u0026#34;Copyright \u0026amp;#xA9; 2021 \u0026lt;a href=\\\u0026#34;https://h16k148.github.io\\\u0026#34;\u0026gt;H16K148\u0026lt;/a\u0026gt;. All Rights Reserved.\u0026#34; ここでは CopyrightHTML を書き換えていませんが、書き換えてください。フッター固定の表示内容が変わります。\nconfig/production/config.toml #  変更前 #  baseURL = \u0026#34;https://h16k148.github.io/hadv-book/\u0026#34; 変更後 #  baseURL = \u0026#34;https://h16k148.github.io/test-hadv-book/\u0026#34; config/staging/config.toml #  変更前 #  baseURL = \u0026#34;/hadv-book/\u0026#34; 変更後 #  baseURL = \u0026#34;/test-hadv-book/\u0026#34; assets/_variables.scss #  変更前 #  1 2 3 4 5 6 7 8  /* You can override SASS variables here. */ $container-max-width: 96rem; $menu-width: 18rem; $toc-width: 18rem; $fa-font-path: \u0026#34;/hadv-book/webfonts\u0026#34;; // @import \u0026#34;plugins/dark\u0026#34;;   変更後 #  1 2 3 4 5 6 7 8  /* You can override SASS variables here. */ $container-max-width: 96rem; $menu-width: 18rem; $toc-width: 18rem; $fa-font-path: \u0026#34;/test-hadv-book/webfonts\u0026#34;; // @import \u0026#34;plugins/dark\u0026#34;;   fontawesome の webfont パスの設定値「$fa-font-path」を修正します。\n"},{"id":10,"href":"/hadv-book/docs/usage/getting-started/006-build-website/","title":"6. Web サイトのビルド","section":"Getting Started","content":"6. Web サイトのビルド #  ここは 006-build-website（content/docs/usage/getting-started/006-build-website）です。\nはじめに #  これまでの手順で、test-hadv-book の Web サイトをビルドする準備が整いました。\nここでは、hugo コマンドでビルドし、ステージングサイトで Web サイトを確認するところまで行います。\n01. hugo コマンドでビルド #  ステージングサイトのビルドを行います。\n初回のビルドは、hadv-book だった時のキャッシュ等も残っているため、いくつかビルドオプションを付与することをおススメします。\nhugo コマンドオプション bash-5.1# hugo --help hugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at http://gohugo.io/. Usage: hugo [flags] hugo [command] Available Commands: config Print the site configuration convert Convert your content to different formats deploy Deploy your site to a Cloud provider. env Print Hugo version and environment info gen A collection of several useful generators. help Help about any command import Import your site from others. list Listing out various types of content mod Various Hugo Modules helpers. new Create new content for your site server A high performance webserver version Print the version number of Hugo Flags: -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --cleanDestinationDir remove files from destination not found in static directories --config string config file (default is path/config.yaml|json|toml) --configDir string config dir (default \u0026#34;config\u0026#34;) -c, --contentDir string filesystem path to content directory --debug debug output -d, --destination string filesystem path to write files to --disableKinds strings disable different kind of pages (home, RSS etc.) --enableGitInfo add Git revision, date and author info to the pages -e, --environment string build environment --forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, --help help for hugo --i18n-warnings print missing translations --ignoreCache ignores the cache directory --ignoreVendor ignores any _vendor directory --ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern -l, --layoutDir string filesystem path to layout directory --log enable Logging --logFile string log File path (if set, logging enabled automatically) --minify minify any supported output format (HTML, XML etc.) --noChmod don\u0026#39;t sync permission mode of files --noTimes don\u0026#39;t sync modification time of files --path-warnings print warnings on duplicate target paths etc. --print-mem print memory usage to screen at intervals --quiet build in quiet mode --renderToMemory render to memory (only useful for benchmark testing) -s, --source string filesystem path to read files relative from --templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, --theme strings themes to use (located in /themes/THEMENAME/) --themesDir string filesystem path to themes directory --trace file write trace to file (not useful in general) -v, --verbose verbose output --verboseLog verbose logging -w, --watch watch filesystem for changes and recreate as needed Additional help topics: hugo check Contains some verification checks Use \u0026#34;hugo [command] --help\u0026#34; for more information about a command.    1  hugo -e staging --cleanDestinationDir --gc --minify   build environment に「staging」をセットすることにより、config/_default/config.toml の設定を config/staging/config.toml の設定で上書きします。 その他のオプションは正しい意味で「適当」に付けます。 例では、static ディレクトリにないファイルを削除したり、minify を有効にして、使用していないキャッシュをビルド後に削除したりしています\nVSCode のターミナルにて、上記コマンドを実行します。\n02. ビルドした Web サイトの確認 #  ステージングサイトの URL にアクセスします。\nURL は以下のひな形に設定値を当てはめたものになります。\nhttp://localhost:\u0026lt;ポート番号\u0026gt;/\u0026lt;サブディレクトリ\u0026gt;  ポート番号  .devcontainer/.env の HADV_STAGING_PORT   サブディレクトリ  .devcontainer/.env の HADV_URL_SUBDIRECTORY    そのため、これまで作成してきた test-hadv-book の場合は、\nhttp://localhost:8083/test-hadv-book にアクセスすることになります。\n"},{"id":11,"href":"/hadv-book/docs/usage/getting-started/007-github-pages/","title":"7. Github Pages で公開","section":"Getting Started","content":"7. Github Pages で公開 #  ここは 007-github-pages（content/docs/usage/getting-started/007-github-pages）です。\nはじめに #  ここでは、 「5. リポジトリの編集」で設定し直した内容、 「6. Web サイトのビルド」でビルドした最新の Web サイトをローカルリポジトリにコミットし、さらにリモートリポジトリ（Github）にプッシュ、そして、 Github リポジトリの Github Pages 公開設定を変更して、ビルドした Web サイトを公開するところまで紹介します。\n01. ローカルリポジトリにコミット #  git add #  これまで変更した内容すべてをコミットの対象とするように、ファイルを Git のステージングエリアに追加します。\nVSCode のターミナルにて次のコマンドを実行します。\n1  git add --all   git config #  コミットを行う前に、プロジェクトの Git 設定を行います。\nVSCode ターミナルで実行する git コマンドは Dev Container で作成されたコンテナ内のものを使用するため、新たに設定を行う必要があります。\n設定しないでコミットを行うと 「Author identity unknown」が表示されます。\n個人の識別情報を設定するには、\n1 2  git config user.name \u0026#34;H16K148\u0026#34; git config user.email \u0026#34;h16k148@gmail.com\u0026#34;   このように実行します。\n個人の識別情報の設定時に \u0026ndash;global を付けないのは理由があります。\nhugo や asciidoctor のバージョンを更新する時など、Dev Container で使っているコンテナを再作成することがありますが、 その時、\u0026ndash;global で設定した個人の識別情報なども消えてしまうのです。  git commit #  Git のステージングエリアにあるファイルをコミットします。\n1  git commit -m \u0026#34;最初のコミット\u0026#34;   02. リモートリポジトリにプッシュ #  git push #  リモートリポジトリに変更内容をプッシュします。\n1  git push   github にサインインを求められた場合 VSCode に Github のトークンキーを入力する必要があります。\nという表示が出ている場合、「許可」を押すとブラウザが立ち上がり、\nと表示されます。\n続けて「Continue」ボタンを押すと、トークンキーが得られます。\nこのへんの表示には適当に「開く」で対応。\nトークンキーを VSCode に入力します。\n  03. Github リポジトリ設定変更 #  リポジトリにアクセスし、\nSettings 画面を表示、\n左サイドの Options にある Pages リンクをクリックします。\n遷移先の Github Pages 設定画面で、\nWeb サイトとして公開する Branch と ディレクトリを選択して「Save」を押します。\n設定が保存され、test-hadv-book の Web サイトが公開されます。\n04. Web サイトへのアクセス #  公開された test-hadv-book の Web サイトにアクセスします。\n"},{"id":12,"href":"/hadv-book/docs/example/asciidoc/","title":"AsciiDoc","section":"Example","content":"AsciiDoc 執筆環境構築 はじめに この文書では、Windows10 環境において、Asciidoctor の 公式Dockerイメージを中心に、 VSCodeの拡張機能 「AsciiDoc」と 「Remote - Containers」を用いた AsciiDoc 執筆環境の構築方法などを紹介します。\n     このドキュメントは Asciidoc で書かれています。背景を白くした方が見やすいです。     [参考] その他のドキュメント執筆環境について これまで使用してきた様々な形式のドキュメントについて経験したことの一端を書き残しますが、興味がなければスルーしてください。\n  MS Excel/Word を使った経験から…（クリックで開きます）   個人としての使用感について\n   機能が豊富で、やりたいことに困らない。\n   書き込む情報量が多くなるとアプリケーションが重くなる。\n     チームとしての使用感について\n   複数人で同じファイルを使用する場合、ロックしたまま放置されることがある。\n     トラブルについて\n   簡単に削除できてしまい、削除されたデータは簡単には戻らない。\n     品質について\n   多くの校正を経て作られた一点ものの資料は美しい。\n   編集者の Excel/Word スキルがそのまま反映され、品質がバラバラになる。\n   資料の変更箇所のハイライトが残されたまま放置される。\n   Excel のセル内に書かれた文字列は、見たままに印刷されない。\n     互換ソフトの存在について\n   購入コストが削減できる。\n   作業コストが上がる。\n   完全互換でないため、マクロや VBA が使えなくなる。また、作れなくなる。\n   Excel/Word と互換ソフトが混在する場合、非互換部分が悪影響を及ぼして、保存するたびに壊れていく（スタイルなど）。\n   外部から入手したマクロ/VBA ツールなどを正常に動かすために、MS Excel/Word がインストールされている環境にファイルを移動して作業することになり、余計な時間がかかる。\n     履歴管理について\n   ドキュメント内に「更新履歴ページ」を作り履歴管理をすると、それ自体の更新を忘れることがある。\n   「更新履歴ページ」に書かれていることがすべてであり、それ以上の履歴を追うことができない。\n   ファイルの移動/コピーが簡単であるためか、他部署により有用な資料が持ち出され、様々な派生バージョン（外部向け資料など）が出来上がる（最初に書いた人が誰なのかも分からなくなる）。\n   ファイルをリネームして過去世代のデータを残すも、リネームの命名規則が守られない。\n          Wiki System を使った経験から…（クリックで開きます）   個人としての使用感について\n   Web の TextArea に入力するため、通常のテキストエディタの機能にも劣る。\n   書きながらプレビューできないため、Wiki 書式を身につけなければ使いづらいところにハードルがあり、利用者が限られていく。\n   書きながらプレビューできないため、途中で壊れたことに気付きづらい。\n   他形式（pdf など）への変換ができず、Web サーバに接続可能な環境でなければ使うことができない。\n   使える書式が少なすぎる。\n     チームとしての使用感について\n   ドキュメントが１箇所にまとまる（別の形式を併用しない限り）。\n   複数人で作業していてもロックはされないが、衝突した場合、Web ページ上でマージしなければならない。\n   メンバーが積極的に利用し続けないと、あっという間に情報は古くなり、廃れる。\n     品質について\n   一定レベルは保てる。\n   限られた Wiki 書式で見やすく使いやすい文章を作るにはセンスが求められる。\n     運用について\n   書き溜めた Wiki 書式データを他の環境に移行することは難しいため、新しいシステムに移行し辛い。\n   専用のデータバックアップの仕組みを作る必要がある。\n   障害により wiki システムが壊れた時のリストア作業が大変。\n         Markdown を使った経験から…（クリックで開きます）   個人としての使用感について\n   テキストベースであるためデータを Git 等で管理しやすい。\n   標準仕様というものがないため方言が多く、ツールとマッチしないケースが出てくる（機能に不足感→独自に拡張→方言出現）。\n     チームとしての使用感について\n   経験なし\n     環境構築について\n   VSCode + 各種プラグイン/ツール類（graphviz, pandoc, plantuml）などで構築した場合、環境構築の手順が多すぎて作業グループ全体で揃えるのが大変。\n           1. システム概要 1.1. システム構成イメージ システム構成イメージを簡易的な配置図にて紹介します。\n  図 1. システム構成イメージ   1.2. システム使用イメージ 構築したシステムを使用するイメージです。\n  Docker Container を起動するときに、Document Folder をマウント（①）しておく。\n  VSCode の Remote-Containers プラグインで起動中のコンテナに接続（②）すると VSCode Agent が作られ、ここに VSCode 拡張機能をインストールする（Asciidoctor 拡張機能など）\n  VSCode で AsciiDoc ファイルを編集（③）する（Asciidoctor 拡張機能のプレビュー機能を使用）\n  完成した AsciiDoc File を HTML5 や PDF に変換し保存（④）する。\n  Asciidoc File は Git 等のバージョン管理システムにて管理（⑤）する。\n      2. システム構築手順 2.1. Docker 環境構築 ここですべきことは、\n   WSL2 を使用可能にする\n  Docker Desktop For Windows のインストール（バックエンド：WSL2）する\n   ことです。 この時点でコマンドプロンプトから docker コマンドが実行できれば問題ないです。\n  参考 URL  https://docs.microsoft.com/ja-jp/windows/wsl/install-win10 https://docs.docker.jp/docker-for-windows/install.html\n    2.2. コンテナ起動 Windows 10 上の Document Folder を\n 1 C:\\Users\\Name\\MyDocs    とした場合、コンテナは次のコマンドで起動します。\n 1 2 3 docker run --name docker-asciidoctor-vscode \\ (1) --volume=\u0026#39;C:\\Users\\Name\\MyDocs:/documents\u0026#39; \\ (2) -it -d asciidoctor/docker-asciidoctor /bin/bash (3)      1 docker-asciidoctor-vscode としていますが、任意の名前をつけてかまいません。   2 Windows 10 上の Document Folder を 公式 Asciidoctor イメージ推奨の /documents にマウントします。   3 バックグラウンドで asciidoctor/docker-asciidoctor イメージの /bin/bash を起動します。    同様の内容で Docker Desktop の GUI を使って起動することも可能です。\n   2.3. VSCode および拡張機能のインストール ここですべきことは、\n   最新版の VSCode をインストールする\n  拡張機能「Remote-Containers」（ms-vscode-remote.remote-containers）を導入する\n  拡張機能「AsciiDoc」（asciidoctor.asciidoctor-vscode）を導入する\n   ことです。\n  参考 URL  https://code.visualstudio.com/docs/setup/windows https://code.visualstudio.com/docs/editor/extension-gallery\n    2.4. VSCode の設定 VSCode に次の設定を追加します。\n 表 1. 設定項目     設定項目 設定値 備考     asciidoc.asciidoctor_command\n asciidoctor -r asciidoctor-diagram\n 必須\n   asciidoc.asciidoctorpdf_command\n asciidoctor-pdf -r asciidoctor-diagram -r /documents/asciidoc/resources/.pdf/theme-business-001/prawn-svg-config.rb\n 必須 コンテナ上のパスを指定する prawn-svg-config.rb については表外で説明する\n   asciidoc.use_asciidoctor_js\n false\n 必須\n   asciidoc.use_asciidoctorpdf\n true\n 必須\n   asciidoc.preview.useEditorStyle\n false\n *.adoc 内でスタイルの指定をするので、無効でよい\n    svg 画像に日本語を含める場合の対応 ここでは「prawn-svg-config.rb」という名前を使っていますが、中身が同じであれば名前は別でも大丈夫です。 asciidoctor-pdf で svg 形式画像を出力する際、svg 形式画像に日本語が含まれると「￢」と表示されてしまう問題の対策として、次のコードを読み込ませる必要があります。\n 1 2 3 Prawn::Svg::Font::GENERIC_CSS_FONT_MAPPING.merge!( \u0026#39;sans-serif\u0026#39; =\u0026gt; \u0026#39;KaiGen Gothic JP\u0026#39; )    指定可能なフォントは、使用しているテーマで定義済みのものに限られます。\n    参考 URL  https://code.visualstudio.com/docs/getstarted/settings https://github.com/asciidoctor/asciidoctor-pdf/issues/82#issuecomment-134949038\n      3. 使用方法 3.1. VSCode で起動中のコンテナに接続 Ctrl+Shift+P もしくは F1 で『Remote-Containers: Attach to Running Container…​』を実行し、ポップアップ表示された「docker-asciidoctor-vscode」コンテナを選択すると、接続が開始されます。\n  3.2. コンテナ内に VSCode 拡張機能をインストール Ctrl+Shift+X で拡張機能一覧を開き、CONTAINER リストの  アイコン（ローカル拡張機能をリモートにインストール）をクリックして、インストールする拡張機能を選択し、インストールを実施します。\n  3.3. Document Folder 内の *.adoc ファイルを開く Ctrl+K Ctrl+O もしくは 「ファイル  フォルダを開く」で /documents フォルダを開き、Ctrl+Shift+E で表示されるエクスプローラーで /documents ディレクトリ以下のファイルを開きます。\n  3.4. *.adoc ファイルの編集とプレビュー asciidoctor 書式でファイルに内容を記述します。 Ctrl+K V でサイドにプレビューを開きます。 テキストを編集すると、プレビュー画面も更新されます。\n  参考 URL  https://docs.asciidoctor.org/asciidoc/latest/ https://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/\n    3.5. html/pdf ファイルの出力 Ctrl+Shift+P もしくは F1 で『AsciiDoc: Save HTML document』を実行すると、*.adoc と同じディレクトリに html ファイルが保存されます。 また、 Ctrl+Shift+P もしくは F1 で『AsciiDoc: Export document as PDF』を実行すると、指定した出力先に PDF ファイルが保存されます。\n    "},{"id":13,"href":"/hadv-book/docs/example/markdown/","title":"Markdown","section":"Example","content":"Markdown #  Markdown Syntax #  ここで Hugo の Markdown で記述できる基本的な構文のサンプルを掲載します。\nHeadings #  次の HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 要素は、６レベルのセクション見出しを表示します。\u0026lt;h1\u0026gt; は一番高いレベルのセクションで \u0026lt;h6\u0026gt; は一番低いレベルのセクションです。\nH1 #  H2 #  H3 #  H4 #  H5 #  H6 #  Paragraph #  寿限無、寿限無、五劫の擦り切れ、海砂利水魚の、水行末・雲来末・風来末、喰う寝る処に住む処、藪ら柑子の藪柑子、パイポ・パイポ・パイポのシューリンガン、 シューリンガンのグーリンダイ、グーリンダイのポンポコピーのポンポコナの、長久命の長助\n色は匂へど　散りぬるを\n我が世誰そ　常ならむ\n有為の奥山　今日越えて\n浅き夢見じ　酔ひもせず\nBlockquotes #  blockquote 要素は、別のソースから引用されたコンテンツの表示に使います。 必要に応じて、footer や cite 要素内にあるべき引用や、注釈や略語などのインライン変更を含む場合もあります。\n帰属なしの Blockquote #   あめつちほしそら、やまかはみねたに 注意 blockquote 内でも Markdown syntax が使えます。\n 帰属ありの Blockquote #   くもきりむろこけ、ひといぬうへすゑ — 作者不明1\n Tables #  Tables は コア Markdown 仕様の一部ではありませんが、Hugo はすぐに使えるようサポートしています。\n   Name Age     Bob 27   Alice 23    tables 内の in-line Markdown Syntax #     Italics Bold Code     italics bold code    Code Blocks #  Code block with backticks #  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces #  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode #  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types #  Ordered List #   First item Second item Third item  Unordered List #   List item Another item And another item  Nested list #   Fruit  Apple Orange Banana   Dairy  Milk Cheese      上記の引用は、日本のいろは歌の別バージョンを抜粋したものです。 \u0026#x21a9;\u0026#xfe0e;\n   "},{"id":14,"href":"/hadv-book/posts/2021/04/20210409/","title":"サンプル日誌","section":"Blog","content":"本日の予定 #   09:00 出社 09:15 朝会 10:00 ○○打ち合わせ 15:00 △△レビュー  本日の業務 #  09:15 朝会 #   □□について確認  先日報告した□□が昨日公開されたため、◎◎サーバー上で試しなさいとの指示   △△のレビュー担当は、▼▼さん。  "},{"id":15,"href":"/hadv-book/docs/usage/templates/minutes/tplt001-md/","title":"議事録テンプレート.md","section":"議事録","content":"第２回 新システム要件確認会議 #  会議情報 #     項目 内容     日時 2021年4月9日 16:00   場所 A社本社ビル 5F 第１会議室   議長 A社：山下（部長）   参加者 A社：川上（課長）、中谷（係長）\nB社：佐藤、鈴木、高橋   欠席者    傍聴者 A社：東原（部長）、西野（係長）   記録者 田中   目的 A社 新システム要件の確定   資料１ A社システム機能配備一覧   資料２ 予約申し込みデータレイアウト（案）    議題 #   予約申し込みデータレイアウトについて 予約確定メール送信機能について 第３回 新システム要件確認会議の開催について  議論（ポイント）と結論 #  申し込みデータレイアウトについて #   予約申し込み時に入力されるデータレイアウトに追加項目として◎◎が必要（中谷）  ◎◎を追加した場合、▼▼も同時に検討しなければ整合性が保てない（佐藤） ▼▼も含めた新しいデータレイアウトを作成してほしい（中谷） 2021/04/30 までに用意する（佐藤）  ⇒ 決定事項０１     既存の項目△△が現在使用されておらず、不要であれば削除をしたい（鈴木）  削除を許可する（川上） 他のデータレイアウトにおいても使用していない項目がないか調査してほしい（中谷） 2021/04/30 に調査結果を報告する（佐藤）  ⇒ 決定事項０２      予約確定メール送信機能について #   あいうえおかきくけこさしすせそ（川上）  たちつてと（鈴木） なにぬねのはひふへほ（中谷） まみむめもやゆよわをん（佐藤） ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵ（鈴木）  ⇒ 決定事項０３      未解決事項・アクションプラン #   ほげほげ  今後のスケジュール #   次回開催予定：◎月◆日  "},{"id":16,"href":"/hadv-book/docs/example/markdown/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"Buttons #  button は、ローカル ページまたは外部リンクにつながるリンクのスタイルです。\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "},{"id":17,"href":"/hadv-book/docs/example/markdown/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"Columns #  columns を使うと、読みやすくするために、短いコンテンツを水平方向に整理できます。\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content #  文壇の、或ある老大家が亡なくなって、その告別式の終り頃から、雨が降りはじめた。早春の雨である。\nその帰り、二人の男が相合傘あいあいがさで歩いている。いずれも、その逝去せいきょした老大家には、お義理一ぺん、話題は、女に就ついての、極きわめて不きんしんな事。 紋服の初老の大男は、文士。それよりずっと若いロイド眼鏡めがね、縞しまズボンの好男子は、編集者。  Mid Content #  私は、その男の写真を三葉、見たことがある。\n一葉は、その男の、幼年時代、とでも言うべきであろうか、十歳前後かと推定される頃の写真であって、その子供が大勢の女のひとに取りかこまれ、 （それは、その子供の姉たち、妹たち、それから、従姉妹いとこたちかと想像される）庭園の池のほとりに、荒い縞の袴はかまをはいて立ち、首を三十度ほど左に傾け、醜く笑っている写真である。  Right Content #  朝、食堂でスウプを一さじ、すっと吸ってお母さまが、\n「あ」\nと幽かすかな叫び声をお挙げになった。\n「髪の毛？」\nスウプに何か、イヤなものでも入っていたのかしら、と思った。\nお母さまは、何事も無かったように、またひらりと一さじ、スウプをお口に流し込み、すましてお顔を横に向け、お勝手の窓の…   "},{"id":18,"href":"/hadv-book/docs/example/markdown/shortcodes/details/","title":"Details","section":"Shortcodes","content":"Details #  details ショートコードは details html5 要素ヘルパーです。\nこれは expand ショートコード（廃止予定）を置き換えるものです。\nExample #  {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content Lorem markdownum insigne\u0026hellip;   "},{"id":19,"href":"/hadv-book/docs/example/markdown/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"Hints #  hint ショートコードは ヒント・警告・通知 などのブロックとして使用できます。\n３色から選択：info, warning, danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "},{"id":20,"href":"/hadv-book/docs/example/markdown/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":"KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample #  {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}}     \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]    Display Mode Example #  Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"},{"id":21,"href":"/hadv-book/docs/example/markdown/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"Mermaid Chart #  Mermaid is library for generating svg charts and diagrams from text.\nExample #  {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}}    mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) sequenceDiagram Alice-Bob: Hello Bob, how are you? alt is sick Bob-Alice: Not so good :( else is well Bob-Alice: Feeling fresh like a daisy end opt Extra response Bob-Alice: Thanks for asking end   "},{"id":22,"href":"/hadv-book/docs/example/markdown/shortcodes/section/page1/","title":"Page 1","section":"Section","content":"Page 1 #  "},{"id":23,"href":"/hadv-book/docs/example/markdown/shortcodes/section/page2/","title":"Page 2","section":"Section","content":"Page 2 #  "},{"id":24,"href":"/hadv-book/docs/example/markdown/shortcodes/section/","title":"Section","section":"Shortcodes","content":"Section #  Section は、title と description を使用して、セクション内のページを定義リストとしてレンダリングします。\nExample #  {{\u0026lt; section \u0026gt;}}  Page 1  Page 1 の description を表示   Page 2  Page 2 の description を表示   "},{"id":25,"href":"/hadv-book/docs/example/markdown/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"Tabs #  tabs を使用すると、サポートされている各プラットフォームのインストール手順など、 コンテキストごとにコンテンツを整理できます。\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "}]